// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: player.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO player (role_id, alive, coins, luck, alignment) VALUES ($1, $2, $3, $4, $5) RETURNING id, role_id, alive, coins, luck, alignment
`

type CreatePlayerParams struct {
	RoleID    pgtype.Int4 `json:"role_id"`
	Alive     bool        `json:"alive"`
	Coins     int32       `json:"coins"`
	Luck      int32       `json:"luck"`
	Alignment Alignment   `json:"alignment"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer,
		arg.RoleID,
		arg.Alive,
		arg.Coins,
		arg.Luck,
		arg.Alignment,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Alive,
		&i.Coins,
		&i.Luck,
		&i.Alignment,
	)
	return i, err
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE FROM player WHERE id = $1
`

func (q *Queries) DeletePlayer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePlayer, id)
	return err
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, role_id, alive, coins, luck, alignment from player WHERE id = $1
`

func (q *Queries) GetPlayer(ctx context.Context, id int32) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayer, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Alive,
		&i.Coins,
		&i.Luck,
		&i.Alignment,
	)
	return i, err
}

const listPlayer = `-- name: ListPlayer :many
SELECT id, role_id, alive, coins, luck, alignment from player
`

func (q *Queries) ListPlayer(ctx context.Context) ([]Player, error) {
	rows, err := q.db.Query(ctx, listPlayer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.Alive,
			&i.Coins,
			&i.Luck,
			&i.Alignment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayer = `-- name: UpdatePlayer :one
UPDATE player SET role_id = $2, alive = $3, coins = $4, luck = $5, alignment = $6 WHERE id = $1 RETURNING id, role_id, alive, coins, luck, alignment
`

type UpdatePlayerParams struct {
	ID        int32       `json:"id"`
	RoleID    pgtype.Int4 `json:"role_id"`
	Alive     bool        `json:"alive"`
	Coins     int32       `json:"coins"`
	Luck      int32       `json:"luck"`
	Alignment Alignment   `json:"alignment"`
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayer,
		arg.ID,
		arg.RoleID,
		arg.Alive,
		arg.Coins,
		arg.Luck,
		arg.Alignment,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Alive,
		&i.Coins,
		&i.Luck,
		&i.Alignment,
	)
	return i, err
}

const updatePlayerAlignment = `-- name: UpdatePlayerAlignment :one
UPDATE player SET alignment = $2 WHERE id = $1 RETURNING id, role_id, alive, coins, luck, alignment
`

type UpdatePlayerAlignmentParams struct {
	ID        int32     `json:"id"`
	Alignment Alignment `json:"alignment"`
}

func (q *Queries) UpdatePlayerAlignment(ctx context.Context, arg UpdatePlayerAlignmentParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayerAlignment, arg.ID, arg.Alignment)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Alive,
		&i.Coins,
		&i.Luck,
		&i.Alignment,
	)
	return i, err
}

const updatePlayerAlive = `-- name: UpdatePlayerAlive :one
UPDATE player SET alive = $2 WHERE id = $1 RETURNING id, role_id, alive, coins, luck, alignment
`

type UpdatePlayerAliveParams struct {
	ID    int32 `json:"id"`
	Alive bool  `json:"alive"`
}

func (q *Queries) UpdatePlayerAlive(ctx context.Context, arg UpdatePlayerAliveParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayerAlive, arg.ID, arg.Alive)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Alive,
		&i.Coins,
		&i.Luck,
		&i.Alignment,
	)
	return i, err
}

const updatePlayerCoins = `-- name: UpdatePlayerCoins :one
UPDATE player SET coins = $2 WHERE id = $1 RETURNING id, role_id, alive, coins, luck, alignment
`

type UpdatePlayerCoinsParams struct {
	ID    int32 `json:"id"`
	Coins int32 `json:"coins"`
}

func (q *Queries) UpdatePlayerCoins(ctx context.Context, arg UpdatePlayerCoinsParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayerCoins, arg.ID, arg.Coins)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Alive,
		&i.Coins,
		&i.Luck,
		&i.Alignment,
	)
	return i, err
}

const updatePlayerLuck = `-- name: UpdatePlayerLuck :one
UPDATE player SET luck = $2 WHERE id = $1 RETURNING id, role_id, alive, coins, luck, alignment
`

type UpdatePlayerLuckParams struct {
	ID   int32 `json:"id"`
	Luck int32 `json:"luck"`
}

func (q *Queries) UpdatePlayerLuck(ctx context.Context, arg UpdatePlayerLuckParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayerLuck, arg.ID, arg.Luck)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Alive,
		&i.Coins,
		&i.Luck,
		&i.Alignment,
	)
	return i, err
}
