// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: player_role.sql

package models

import (
	"context"
)

const createPlayerRoleJoin = `-- name: CreatePlayerRoleJoin :one
INSERT INTO player_role (player_id, role_id) VALUES ($1, $2) RETURNING player_id, role_id
`

type CreatePlayerRoleJoinParams struct {
	PlayerID int64 `json:"player_id"`
	RoleID   int32 `json:"role_id"`
}

func (q *Queries) CreatePlayerRoleJoin(ctx context.Context, arg CreatePlayerRoleJoinParams) (PlayerRole, error) {
	row := q.db.QueryRow(ctx, createPlayerRoleJoin, arg.PlayerID, arg.RoleID)
	var i PlayerRole
	err := row.Scan(&i.PlayerID, &i.RoleID)
	return i, err
}

const getPlayerRole = `-- name: GetPlayerRole :one
select role.id, role.name, role.description, role.alignment
from player_role
inner join role on player_role.role_id = role.id
where player_role.player_id = $1
`

func (q *Queries) GetPlayerRole(ctx context.Context, playerID int64) (Role, error) {
	row := q.db.QueryRow(ctx, getPlayerRole, playerID)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Alignment,
	)
	return i, err
}
