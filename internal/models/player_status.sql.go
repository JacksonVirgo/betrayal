// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: player_status.sql

package models

import (
	"context"
)

const createPlayerStatusJoin = `-- name: CreatePlayerStatusJoin :one
INSERT INTO player_status (player_id, status_id) VALUES ($1, $2) RETURNING player_id, status_id, quantity
`

type CreatePlayerStatusJoinParams struct {
	PlayerID int64 `json:"player_id"`
	StatusID int32 `json:"status_id"`
}

func (q *Queries) CreatePlayerStatusJoin(ctx context.Context, arg CreatePlayerStatusJoinParams) (PlayerStatus, error) {
	row := q.db.QueryRow(ctx, createPlayerStatusJoin, arg.PlayerID, arg.StatusID)
	var i PlayerStatus
	err := row.Scan(&i.PlayerID, &i.StatusID, &i.Quantity)
	return i, err
}

const listPlayerStatus = `-- name: ListPlayerStatus :many
select status.id, status.name, status.description
from player_status
inner join status on player_status.status_id = status.id
where player_status.player_id = $1
`

func (q *Queries) ListPlayerStatus(ctx context.Context, playerID int64) ([]Status, error) {
	rows, err := q.db.Query(ctx, listPlayerStatus, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Status
	for rows.Next() {
		var i Status
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlayerStatusInventory = `-- name: ListPlayerStatusInventory :many
select status.id, status.name, status.description, player_status.quantity
from player_status
inner join status on player_status.status_id = status.id
where player_status.player_id = $1
`

type ListPlayerStatusInventoryRow struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Quantity    int32  `json:"quantity"`
}

func (q *Queries) ListPlayerStatusInventory(ctx context.Context, playerID int64) ([]ListPlayerStatusInventoryRow, error) {
	rows, err := q.db.Query(ctx, listPlayerStatusInventory, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPlayerStatusInventoryRow
	for rows.Next() {
		var i ListPlayerStatusInventoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
